name: validate-migration

on: [ push ]

env:
  # Constants
  P4_DOWNLOAD_URL: "https://www.perforce.com/downloads/perforce/r23.1/bin.linux26x86_64/p4api-glibc2.3-openssl1.0.2.tgz"
  OPENSSL_DOWNLOAD_URL: "https://www.openssl.org/source/openssl-1.0.2u.tar.gz"
  OPENSSL_INSTALL_DIR: "/tmp/openssl-install"

  # Perforce credentials
  P4PORT: "perforce.sgdev.org:1666" # the address of the Perforce server to connect to
  P4USER: "admin" # the name of the Perforce user
  P4PASSWD: ${{ secrets.P4PASSWD }} # the ticket for the Perforce user

  DEPOT_NAME: "source/src-cli" # the name of the Perforce depot to validate the git migration against

jobs:
  validate-migration:
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - addressSanitizer
          - threadSanitizer
          #          disabled until we figure out how to build with clang in github actions
          #          - memorySanitizer
          - leakSanitizer
          - undefinedSanitizer
          - noSanitizer
        include:
          - sanitizer: addressSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=address -g"
          - sanitizer: threadSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=thread -g"
          #          disabled until we figure out how to build with clang in github actions
          #          - sanitizer: memorySanitizer
          #            CMAKE_CXX_FLAGS: "-fsanitize=memory -g"
          - sanitizer: leakSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=leak -g"
          - sanitizer: undefinedSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=undefined -g"
          - sanitizer: noSanitizer
            CMAKE_CXX_FLAGS: ""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: "Install Perforce CLI"
        uses: perforce/setup-p4@1.0.2
        with:
          command: "help"
          p4_version: 23.1

      - name: "Install c++ compilation dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install git make cmake gcc g++ clang --yes # p4-fusion dependencies

      - name: "Cache Perforce API headers"
        id: cache-p4api
        uses: actions/cache@v2
        with:
          path: vendor/helix-core-api/linux
          key: ${{ runner.os }}-p4api-${{ env.P4_DOWNLOAD_URL }}

      - name: "Download Perforce API headers"
        if: ${{ steps.cache-p4api.outputs.cache-hit != 'true' }}
        run: |
          curl -L "${P4_DOWNLOAD_URL}" --output p4.tgz
          mkdir -p vendor/helix-core-api/linux
          tar -C vendor/helix-core-api/linux -xzf p4.tgz --strip 1

      - name: "Cache OpenSSL"
        uses: actions/cache@v2
        id: cache-openssl
        with:
          path: ${{ env.OPENSSL_INSTALL_DIR }}
          key: ${{ runner.os }}-openssl-${{ env.OPENSSL_DOWNLOAD_URL }}

      - name: "Compile OpenSSL"
        if: ${{ steps.cache-openssl.outputs.cache-hit != 'true' }}
        run: |
          mkdir openssl-src
          curl -L "${OPENSSL_DOWNLOAD_URL}" --output openssl.tgz
          tar -C openssl-src -xzf openssl.tgz --strip 1
          pushd openssl-src
          ./config --prefix="${OPENSSL_INSTALL_DIR}" --static
          make install
          popd 

      - name: "Run validate migration script"
        run: |
          sudo apt-get install gettext --yes # for envsubst 
          .github/workflows/run-test.sh
        env:
          P4CLIENT: "validate-migration-${{ github.ref_name }}-${{ github.run_number }}-${{ matrix.sanitizer }}" # the temporary Perforce client name to use while validating the git migration
          OPENSSL_ROOT_DIR: ${{ env.OPENSSL_INSTALL_DIR }}
          CMAKE_CXX_FLAGS: "${{ matrix.CMAKE_CXX_FLAGS }} -O0"